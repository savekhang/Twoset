const db = require('../config/db');
const express = require('express');
const router = express.Router();
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const endpointSecret = process.env.STRIPE_WEBHOOK_SECRET;

router.post(
  '/',
  express.raw({ type: 'application/json' }),
  async (req, res) => {
    const sig = req.headers['stripe-signature'];
    let event;

    try {
      event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
    } catch (err) {
      console.error('‚ùå Webhook Error:', err.message);
      return res.status(400).send(`Webhook Error: ${err.message}`);
    }

    if (event.type === 'checkout.session.completed') {
      const session = event.data.object;
      const customer_email = session.customer_email;

      try {
        const [user] = await db.query('SELECT * FROM users WHERE email = ?', [customer_email]);
        if (!user) {
          console.log(`‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi email ${customer_email}`);
          return res.status(404).send('User not found');
        }

        const userId = user.id;

        // 1. C·∫≠p nh·∫≠t t√†i kho·∫£n premium
        await db.query('UPDATE users SET is_premium = 1 WHERE id = ?', [userId]);

        // 2. Ghi v√†o b·∫£ng payments
        await db.query(
          'INSERT INTO payments (user_id, amount, order_id, transaction_no, pay_date, status) VALUES (?, ?, ?, ?, NOW(), ?)',
          [userId, 1.00, session.id, session.payment_intent, 'success']
        );

        // 3. C·∫≠p nh·∫≠t super_like_usage (v√¥ h·∫°n: NULL ho·∫∑c -1 t√πy logic)
        await db.query(
          `UPDATE super_like_usage SET count = NULL WHERE user_id = ?`,
          [userId]
        );

        // 4. T·∫°o th√¥ng b√°o n√¢ng c·∫•p
        await db.query(
          `INSERT INTO notifications (user_id, message, type, metadata) VALUES (?, ?, ?, ?)`,
          [
            userId,
            'T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n√¢ng c·∫•p l√™n Premium üéâ',
            'system',
            JSON.stringify({ type: 'premium_upgrade' })
          ]
        );

        console.log('‚úÖ ƒê√£ x·ª≠ l√Ω n√¢ng c·∫•p Premium cho:', customer_email);
      } catch (err) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω webhook:', err);
        return res.status(500).send('Internal Server Error');
      }
    }

    res.status(200).json({ received: true });
  }
);

module.exports = router;
